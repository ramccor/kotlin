/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.konan.test.blackbox;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.junit.jupiter.api.Tag;
import org.jetbrains.kotlin.konan.test.blackbox.support.group.UseExtTestCaseGroupProvider;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateNativeTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/kotlinx-serialization/testData")
@TestDataPath("$PROJECT_ROOT")
@Tag("klibIrInliner")
@Tag("serialization-native")
@UseExtTestCaseGroupProvider()
public class SerializationFirNativeWithInlinedFunInKlibTestGenerated extends AbstractNativeCodegenBoxTest {
  @Test
  public void testAllFilesPresentInTestData() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlinx-serialization/testData"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
  }

  @Nested
  @TestMetadata("plugins/kotlinx-serialization/testData/boxIr")
  @TestDataPath("$PROJECT_ROOT")
  @Tag("klibIrInliner")
  @Tag("serialization-native")
  @UseExtTestCaseGroupProvider()
  public class BoxIr {
    @Test
    public void testAllFilesPresentInBoxIr() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlinx-serialization/testData/boxIr"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
    }

    @Test
    @TestMetadata("annotationsOnFile.kt")
    public void testAnnotationsOnFile() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/annotationsOnFile.kt");
    }

    @Test
    @TestMetadata("annotationsOnFileExplicitArray.kt")
    public void testAnnotationsOnFileExplicitArray() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/annotationsOnFileExplicitArray.kt");
    }

    @Test
    @TestMetadata("caching.kt")
    public void testCaching() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/caching.kt");
    }

    @Test
    @TestMetadata("clashBetweenSerializableAndNonSerializableProperty.kt")
    public void testClashBetweenSerializableAndNonSerializableProperty() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/clashBetweenSerializableAndNonSerializableProperty.kt");
    }

    @Test
    @TestMetadata("classSerializerAsObject.kt")
    public void testClassSerializerAsObject() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/classSerializerAsObject.kt");
    }

    @Test
    @TestMetadata("constValInSerialName.kt")
    public void testConstValInSerialName() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/constValInSerialName.kt");
    }

    @Test
    @TestMetadata("contextualByDefault.kt")
    public void testContextualByDefault() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/contextualByDefault.kt");
    }

    @Test
    @TestMetadata("contextualFallback.kt")
    public void testContextualFallback() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/contextualFallback.kt");
    }

    @Test
    @TestMetadata("contextualWithTypeParameters.kt")
    public void testContextualWithTypeParameters() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/contextualWithTypeParameters.kt");
    }

    @Test
    @TestMetadata("delegatedInterface.kt")
    public void testDelegatedInterface() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/delegatedInterface.kt");
    }

    @Test
    @TestMetadata("delegatedProperty.kt")
    public void testDelegatedProperty() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/delegatedProperty.kt");
    }

    @Test
    @TestMetadata("enumsAreCached.kt")
    public void testEnumsAreCached() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/enumsAreCached.kt");
    }

    @Test
    @TestMetadata("genericBaseClassMultiple.kt")
    public void testGenericBaseClassMultiple() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/genericBaseClassMultiple.kt");
    }

    @Test
    @TestMetadata("genericBaseClassSimple.kt")
    public void testGenericBaseClassSimple() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/genericBaseClassSimple.kt");
    }

    @Test
    @TestMetadata("generics.kt")
    public void testGenerics() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/generics.kt");
    }

    @Test
    @TestMetadata("instantSerializer.kt")
    public void testInstantSerializer() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/instantSerializer.kt");
    }

    @Test
    @TestMetadata("interfaces.kt")
    public void testInterfaces() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/interfaces.kt");
    }

    @Test
    @TestMetadata("KeepGeneratedSerializer.kt")
    public void testKeepGeneratedSerializer() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/KeepGeneratedSerializer.kt");
    }

    @Test
    @TestMetadata("metaSerializable.kt")
    public void testMetaSerializable() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/metaSerializable.kt");
    }

    @Test
    @TestMetadata("multipleGenericsPolymorphic.kt")
    public void testMultipleGenericsPolymorphic() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/multipleGenericsPolymorphic.kt");
    }

    @Test
    @TestMetadata("sealedClassMultifile.kt")
    public void testSealedClassMultifile() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/sealedClassMultifile.kt");
    }

    @Test
    @TestMetadata("sealedInterfaces.kt")
    public void testSealedInterfaces() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/sealedInterfaces.kt");
    }

    @Test
    @TestMetadata("serializableCompanion.kt")
    public void testSerializableCompanion() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/serializableCompanion.kt");
    }

    @Test
    @TestMetadata("serializableFromAnotherModule.kt")
    public void testSerializableFromAnotherModule() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/serializableFromAnotherModule.kt");
    }

    @Test
    @TestMetadata("serializableFromAnotherModule_multipleFields.kt")
    public void testSerializableFromAnotherModule_multipleFields() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/serializableFromAnotherModule_multipleFields.kt");
    }

    @Test
    @TestMetadata("serializableOnPropertyType.kt")
    public void testSerializableOnPropertyType() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/serializableOnPropertyType.kt");
    }

    @Test
    @TestMetadata("serializerFactory.kt")
    public void testSerializerFactory() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/serializerFactory.kt");
    }

    @Test
    @TestMetadata("serializerFactoryInUserDefined.kt")
    public void testSerializerFactoryInUserDefined() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/serializerFactoryInUserDefined.kt");
    }

    @Test
    @TestMetadata("starProjections.kt")
    public void testStarProjections() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/starProjections.kt");
    }

    @Test
    @TestMetadata("useSerializersChain.kt")
    public void testUseSerializersChain() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/useSerializersChain.kt");
    }

    @Test
    @TestMetadata("userDefinedSerializerInCompanion.kt")
    public void testUserDefinedSerializerInCompanion() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/userDefinedSerializerInCompanion.kt");
    }

    @Test
    @TestMetadata("uuidSerializer.kt")
    public void testUuidSerializer() {
      runTest("plugins/kotlinx-serialization/testData/boxIr/uuidSerializer.kt");
    }
  }

  @Nested
  @TestMetadata("plugins/kotlinx-serialization/testData/boxWithoutRuntime")
  @TestDataPath("$PROJECT_ROOT")
  @Tag("klibIrInliner")
  @Tag("serialization-native")
  @UseExtTestCaseGroupProvider()
  public class BoxWithoutRuntime {
    @Test
    public void testAllFilesPresentInBoxWithoutRuntime() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlinx-serialization/testData/boxWithoutRuntime"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
    }
  }

  @Nested
  @TestMetadata("plugins/kotlinx-serialization/testData/codegen")
  @TestDataPath("$PROJECT_ROOT")
  @Tag("klibIrInliner")
  @Tag("serialization-native")
  @UseExtTestCaseGroupProvider()
  public class Codegen {
    @Test
    public void testAllFilesPresentInCodegen() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlinx-serialization/testData/codegen"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
    }

    @Test
    @TestMetadata("Basic.kt")
    public void testBasic() {
      runTest("plugins/kotlinx-serialization/testData/codegen/Basic.kt");
    }

    @Test
    @TestMetadata("Intrinsics.kt")
    public void testIntrinsics() {
      runTest("plugins/kotlinx-serialization/testData/codegen/Intrinsics.kt");
    }

    @Test
    @TestMetadata("IntrinsicsAdvanced.kt")
    public void testIntrinsicsAdvanced() {
      runTest("plugins/kotlinx-serialization/testData/codegen/IntrinsicsAdvanced.kt");
    }

    @Test
    @TestMetadata("IntrinsicsNonReified.kt")
    public void testIntrinsicsNonReified() {
      runTest("plugins/kotlinx-serialization/testData/codegen/IntrinsicsNonReified.kt");
    }

    @Test
    @TestMetadata("KeepGeneratedSerializer.kt")
    public void testKeepGeneratedSerializer() {
      runTest("plugins/kotlinx-serialization/testData/codegen/KeepGeneratedSerializer.kt");
    }

    @Test
    @TestMetadata("Sealed.kt")
    public void testSealed() {
      runTest("plugins/kotlinx-serialization/testData/codegen/Sealed.kt");
    }
  }

  @Nested
  @TestMetadata("plugins/kotlinx-serialization/testData/compilerFacility")
  @TestDataPath("$PROJECT_ROOT")
  @Tag("klibIrInliner")
  @Tag("serialization-native")
  @UseExtTestCaseGroupProvider()
  public class CompilerFacility {
    @Test
    public void testAllFilesPresentInCompilerFacility() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlinx-serialization/testData/compilerFacility"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
    }

    @Test
    @TestMetadata("serializationPlugin.kt")
    public void testSerializationPlugin() {
      runTest("plugins/kotlinx-serialization/testData/compilerFacility/serializationPlugin.kt");
    }
  }

  @Nested
  @TestMetadata("plugins/kotlinx-serialization/testData/diagnostics")
  @TestDataPath("$PROJECT_ROOT")
  @Tag("klibIrInliner")
  @Tag("serialization-native")
  @UseExtTestCaseGroupProvider()
  public class Diagnostics {
    @Test
    @TestMetadata("abstractCustomSerializer.kt")
    public void testAbstractCustomSerializer() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/abstractCustomSerializer.kt");
    }

    @Test
    public void testAllFilesPresentInDiagnostics() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlinx-serialization/testData/diagnostics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
    }

    @Test
    @TestMetadata("companionObjectSerializers.kt")
    public void testCompanionObjectSerializers() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/companionObjectSerializers.kt");
    }

    @Test
    @TestMetadata("customSerializers.kt")
    public void testCustomSerializers() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/customSerializers.kt");
    }

    @Test
    @TestMetadata("DuplicateSerialName.kt")
    public void testDuplicateSerialName() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/DuplicateSerialName.kt");
    }

    @Test
    @TestMetadata("EnumDuplicateSerialName.kt")
    public void testEnumDuplicateSerialName() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/EnumDuplicateSerialName.kt");
    }

    @Test
    @TestMetadata("externalSerialierJava.kt")
    public void testExternalSerialierJava() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/externalSerialierJava.kt");
    }

    @Test
    @TestMetadata("ExternalSerializers.kt")
    public void testExternalSerializers() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/ExternalSerializers.kt");
    }

    @Test
    @TestMetadata("GeneratedSerializerInaccessible.kt")
    public void testGeneratedSerializerInaccessible() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/GeneratedSerializerInaccessible.kt");
    }

    @Test
    @TestMetadata("GenericArrays.kt")
    public void testGenericArrays() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/GenericArrays.kt");
    }

    @Test
    @TestMetadata("IncorrectTransient.kt")
    public void testIncorrectTransient() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/IncorrectTransient.kt");
    }

    @Test
    @TestMetadata("IncorrectTransient2.kt")
    public void testIncorrectTransient2() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/IncorrectTransient2.kt");
    }

    @Test
    @TestMetadata("InheritableInfo.kt")
    public void testInheritableInfo() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/InheritableInfo.kt");
    }

    @Test
    @TestMetadata("JsonRedundantFormat.kt")
    public void testJsonRedundantFormat() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/JsonRedundantFormat.kt");
    }

    @Test
    @TestMetadata("JsonRedundantFormatViaAliasedImport.kt")
    public void testJsonRedundantFormatViaAliasedImport() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/JsonRedundantFormatViaAliasedImport.kt");
    }

    @Test
    @TestMetadata("JsonRedundantFormatViaAliasedImport.fir.kt")
    public void testJsonRedundantFormatViaAliasedImport_fir() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/JsonRedundantFormatViaAliasedImport.fir.kt");
    }

    @Test
    @TestMetadata("JsonRedundantFormatViaTypeAlias.kt")
    public void testJsonRedundantFormatViaTypeAlias() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/JsonRedundantFormatViaTypeAlias.kt");
    }

    @Test
    @TestMetadata("JsonRedundantFormatViaTypeAlias.fir.kt")
    public void testJsonRedundantFormatViaTypeAlias_fir() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/JsonRedundantFormatViaTypeAlias.fir.kt");
    }

    @Test
    @TestMetadata("JsonRedundantFormat.fir.kt")
    public void testJsonRedundantFormat_fir() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/JsonRedundantFormat.fir.kt");
    }

    @Test
    @TestMetadata("KeepGeneratedSerializerDiagnostic.kt")
    public void testKeepGeneratedSerializerDiagnostic() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/KeepGeneratedSerializerDiagnostic.kt");
    }

    @Test
    @TestMetadata("LazyRecursionBug.kt")
    public void testLazyRecursionBug() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/LazyRecursionBug.kt");
    }

    @Test
    @TestMetadata("LocalAndAnonymous.kt")
    public void testLocalAndAnonymous() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/LocalAndAnonymous.kt");
    }

    @Test
    @TestMetadata("metaSerializableNested.kt")
    public void testMetaSerializableNested() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/metaSerializableNested.kt");
    }

    @Test
    @TestMetadata("NoSuitableCtorInParent.kt")
    public void testNoSuitableCtorInParent() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/NoSuitableCtorInParent.kt");
    }

    @Test
    @TestMetadata("NonSerializable.kt")
    public void testNonSerializable() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/NonSerializable.kt");
    }

    @Test
    @TestMetadata("NonSerializable.fir.kt")
    public void testNonSerializable_fir() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/NonSerializable.fir.kt");
    }

    @Test
    @TestMetadata("NullabilityIncompatible.kt")
    public void testNullabilityIncompatible() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/NullabilityIncompatible.kt");
    }

    @Test
    @TestMetadata("ParamIsNotProperty.kt")
    public void testParamIsNotProperty() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/ParamIsNotProperty.kt");
    }

    @Test
    @TestMetadata("ParametrizedExternalSerializers.kt")
    public void testParametrizedExternalSerializers() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/ParametrizedExternalSerializers.kt");
    }

    @Test
    @TestMetadata("ProtobufFieldNumbers.kt")
    public void testProtobufFieldNumbers() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/ProtobufFieldNumbers.kt");
    }

    @Test
    @TestMetadata("repeatableSerialInfo.kt")
    public void testRepeatableSerialInfo() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/repeatableSerialInfo.kt");
    }

    @Test
    @TestMetadata("serializableCompanionOfSerializable.kt")
    public void testSerializableCompanionOfSerializable() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/serializableCompanionOfSerializable.kt");
    }

    @Test
    @TestMetadata("SerializableEnums.kt")
    public void testSerializableEnums() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/SerializableEnums.kt");
    }

    @Test
    @TestMetadata("SerializableIgnored.kt")
    public void testSerializableIgnored() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/SerializableIgnored.kt");
    }

    @Test
    @TestMetadata("serializerFromOtherModule.kt")
    public void testSerializerFromOtherModule() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/serializerFromOtherModule.kt");
    }

    @Test
    @TestMetadata("SerializerTypeCompatibleForSpecials.kt")
    public void testSerializerTypeCompatibleForSpecials() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/SerializerTypeCompatibleForSpecials.kt");
    }

    @Test
    @TestMetadata("SerializerTypeIncompatible.kt")
    public void testSerializerTypeIncompatible() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/SerializerTypeIncompatible.kt");
    }

    @Test
    @TestMetadata("SerializerTypeIncompatibleViaTypealias.kt")
    public void testSerializerTypeIncompatibleViaTypealias() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/SerializerTypeIncompatibleViaTypealias.kt");
    }

    @Test
    @TestMetadata("SerializerTypeIncompatibleViaTypealias.fir.kt")
    public void testSerializerTypeIncompatibleViaTypealias_fir() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/SerializerTypeIncompatibleViaTypealias.fir.kt");
    }

    @Test
    @TestMetadata("SerializerTypeIncompatible.fir.kt")
    public void testSerializerTypeIncompatible_fir() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/SerializerTypeIncompatible.fir.kt");
    }

    @Test
    @TestMetadata("trainsientLateinit.kt")
    public void testTrainsientLateinit() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/trainsientLateinit.kt");
    }

    @Test
    @TestMetadata("trainsientLateinit.fir.kt")
    public void testTrainsientLateinit_fir() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/trainsientLateinit.fir.kt");
    }

    @Test
    @TestMetadata("Transients.kt")
    public void testTransients() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/Transients.kt");
    }

    @Test
    @TestMetadata("typeAliases.kt")
    public void testTypeAliases() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/typeAliases.kt");
    }

    @Test
    @TestMetadata("typeAliasesCustomized.kt")
    public void testTypeAliasesCustomized() {
      runTest("plugins/kotlinx-serialization/testData/diagnostics/typeAliasesCustomized.kt");
    }
  }

  @Nested
  @TestMetadata("plugins/kotlinx-serialization/testData/firMembers")
  @TestDataPath("$PROJECT_ROOT")
  @Tag("klibIrInliner")
  @Tag("serialization-native")
  @UseExtTestCaseGroupProvider()
  public class FirMembers {
    @Test
    @TestMetadata("abstractAndSealed.kt")
    public void testAbstractAndSealed() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/abstractAndSealed.kt");
    }

    @Test
    public void testAllFilesPresentInFirMembers() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlinx-serialization/testData/firMembers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
    }

    @Test
    @TestMetadata("classWithCompanionObject.kt")
    public void testClassWithCompanionObject() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/classWithCompanionObject.kt");
    }

    @Test
    @TestMetadata("classWithGenericParameters.kt")
    public void testClassWithGenericParameters() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/classWithGenericParameters.kt");
    }

    @Test
    @TestMetadata("defaultProperties.kt")
    public void testDefaultProperties() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/defaultProperties.kt");
    }

    @Test
    @TestMetadata("enums.kt")
    public void testEnums() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/enums.kt");
    }

    @Test
    @TestMetadata("externalSerializers.kt")
    public void testExternalSerializers() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/externalSerializers.kt");
    }

    @Test
    @TestMetadata("inlineClasses.kt")
    public void testInlineClasses() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/inlineClasses.kt");
    }

    @Test
    @TestMetadata("metaSerializable.kt")
    public void testMetaSerializable() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/metaSerializable.kt");
    }

    @Test
    @TestMetadata("multipleProperties.kt")
    public void testMultipleProperties() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/multipleProperties.kt");
    }

    @Test
    @TestMetadata("privatePropertiesSerialization.kt")
    public void testPrivatePropertiesSerialization() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/privatePropertiesSerialization.kt");
    }

    @Test
    @TestMetadata("serializableObject.kt")
    public void testSerializableObject() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/serializableObject.kt");
    }

    @Test
    @TestMetadata("serializableWith.kt")
    public void testSerializableWith() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/serializableWith.kt");
    }

    @Test
    @TestMetadata("serializableWithCompanion.kt")
    public void testSerializableWithCompanion() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/serializableWithCompanion.kt");
    }

    @Test
    @TestMetadata("serializerViaCompanion.kt")
    public void testSerializerViaCompanion() {
      runTest("plugins/kotlinx-serialization/testData/firMembers/serializerViaCompanion.kt");
    }
  }

  @Nested
  @TestMetadata("plugins/kotlinx-serialization/testData/jdk11BoxIr")
  @TestDataPath("$PROJECT_ROOT")
  @Tag("klibIrInliner")
  @Tag("serialization-native")
  @UseExtTestCaseGroupProvider()
  public class Jdk11BoxIr {
    @Test
    public void testAllFilesPresentInJdk11BoxIr() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlinx-serialization/testData/jdk11BoxIr"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
    }
  }

  @Nested
  @TestMetadata("plugins/kotlinx-serialization/testData/matrix")
  @TestDataPath("$PROJECT_ROOT")
  @Tag("klibIrInliner")
  @Tag("serialization-native")
  @UseExtTestCaseGroupProvider()
  public class Matrix {
    @Test
    public void testAllFilesPresentInMatrix() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlinx-serialization/testData/matrix"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
    }

    @Test
    @TestMetadata("enums.kt")
    public void testEnums() {
      runTest("plugins/kotlinx-serialization/testData/matrix/enums.kt");
    }
  }
}
