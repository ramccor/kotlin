/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fir.test.cases.generated.cases.components.relationProvider;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.fir.test.configurators.AnalysisApiFirTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.relationProvider.AbstractHasConflictingSignatureWithTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith")
@TestDataPath("$PROJECT_ROOT")
public class FirIdeDependentAnalysisSourceModuleHasConflictingSignatureWithTestGenerated extends AbstractHasConflictingSignatureWithTest {
  @NotNull
  @Override
  public AnalysisApiTestConfigurator getConfigurator() {
    return AnalysisApiFirTestConfiguratorFactory.INSTANCE.createConfigurator(
      new AnalysisApiTestConfiguratorFactoryData(
        FrontendKind.Fir,
        TestModuleKind.Source,
        AnalysisSessionMode.Dependent,
        AnalysisApiMode.Ide
      )
    );
  }

  @Test
  public void testAllFilesPresentInHasConflictingSignatureWith() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @Test
  @TestMetadata("differentFunctionNamesWithSameSignature.kt")
  public void testDifferentFunctionNamesWithSameSignature() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/differentFunctionNamesWithSameSignature.kt");
  }

  @Test
  @TestMetadata("extensionAndRegularFunctions.kt")
  public void testExtensionAndRegularFunctions() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/extensionAndRegularFunctions.kt");
  }

  @Test
  @TestMetadata("functionAndMethod.kt")
  public void testFunctionAndMethod() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/functionAndMethod.kt");
  }

  @Test
  @TestMetadata("functionTypeErasure.kt")
  public void testFunctionTypeErasure() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/functionTypeErasure.kt");
  }

  @Test
  @TestMetadata("functionsWithTypeParameters.kt")
  public void testFunctionsWithTypeParameters() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/functionsWithTypeParameters.kt");
  }

  @Test
  @TestMetadata("genericsWithDifferentBounds.kt")
  public void testGenericsWithDifferentBounds() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/genericsWithDifferentBounds.kt");
  }

  @Test
  @TestMetadata("localAndGlobalFunction.kt")
  public void testLocalAndGlobalFunction() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/localAndGlobalFunction.kt");
  }

  @Test
  @TestMetadata("lowPriorityAnnotation.kt")
  public void testLowPriorityAnnotation() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/lowPriorityAnnotation.kt");
  }

  @Test
  @TestMetadata("methodAndExtensionFunction.kt")
  public void testMethodAndExtensionFunction() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/methodAndExtensionFunction.kt");
  }

  @Test
  @TestMetadata("overloadedFunction.kt")
  public void testOverloadedFunction() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/overloadedFunction.kt");
  }

  @Test
  @TestMetadata("returnValueOverload.kt")
  public void testReturnValueOverload() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/returnValueOverload.kt");
  }

  @Test
  @TestMetadata("varargParameterAndArrayParameter.kt")
  public void testVarargParameterAndArrayParameter() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/varargParameterAndArrayParameter.kt");
  }

  @Test
  @TestMetadata("withAndWithoutContextParameter.kt")
  public void testWithAndWithoutContextParameter() {
    runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/withAndWithoutContextParameter.kt");
  }

  @Nested
  @TestMetadata("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/withErrors")
  @TestDataPath("$PROJECT_ROOT")
  public class WithErrors {
    @Test
    public void testAllFilesPresentInWithErrors() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/withErrors"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("errorValueParameters.kt")
    public void testErrorValueParameters() {
      runTest("analysis/analysis-api/testData/components/relationProvider/hasConflictingSignatureWith/withErrors/errorValueParameters.kt");
    }
  }
}
